openapi: 3.0.3
info:
  title: Blog Platform API
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  /health:
    get:
      summary: API health
      responses:
        '200': { description: OK }
  /articles/health:
    get:
      summary: Articles health
      responses:
        '200': { description: OK }
  /articles:
    get:
      summary: List articles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Article' }
    post:
      summary: Create article
      security: [{ firebase: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleCreate'
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Article' } } } }
  /articles/{slug}:
    get:
      summary: Get by slug
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Article' } } } }
        '404': { description: Not Found }
    put:
      summary: Update by slug
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleUpdate'
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Article' } } } }
        '404': { description: Not Found }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
    delete:
      summary: Delete by slug
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '404': { description: Not Found }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /search:
    get:
      summary: Search articles
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Article' }
  /articles/{slug}/comments:
    get:
      summary: List comments
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Comment' } } } } }
        '404': { description: Not Found }
    post:
      summary: Add comment
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CommentCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Comment' } } } }
        '401': { description: Unauthorized }
  /articles/{slug}/likes:
    get:
      summary: Get likes state
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { likes: { type: integer }, liked: { type: boolean } } } } } }
        '404': { description: Not Found }
    post:
      summary: Toggle like
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: State, content: { application/json: { schema: { type: object, properties: { likes: { type: integer }, liked: { type: boolean } } } } } }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /articles/{slug}/bookmark:
    get:
      summary: Get bookmark state
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { bookmarked: { type: boolean } } } } } }
        '404': { description: Not Found }
    post:
      summary: Toggle bookmark
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200': { description: State, content: { application/json: { schema: { type: object, properties: { bookmarked: { type: boolean } } } } } }
        '401': { description: Unauthorized }
        '404': { description: Not Found }
  /authors/{authorId}/subscription:
    get:
      summary: Get subscription state and count
      parameters:
        - in: path
          name: authorId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { subscribed: { type: boolean }, count: { type: integer } } } } } }
    post:
      summary: Toggle subscription
      security: [{ firebase: [] }]
      parameters:
        - in: path
          name: authorId
          required: true
          schema: { type: string }
      responses:
        '200': { description: State, content: { application/json: { schema: { type: object, properties: { subscribed: { type: boolean }, count: { type: integer } } } } } }
        '401': { description: Unauthorized }
  /users/me/bookmarks:
    get:
      summary: List my bookmarks
      security: [{ firebase: [] }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Article' } } } } }
        '401': { description: Unauthorized }
  /users/me/articles:
    get:
      summary: List my articles
      security: [{ firebase: [] }]
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Article' } } } } }
        '401': { description: Unauthorized }
  /upload/cover:
    post:
      summary: Upload cover image
      security: [{ firebase: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, alt]
              properties:
                file:
                  type: string
                  format: binary
                alt:
                  type: string
      responses:
        '200': { description: OK, content: { application/json: { schema: { type: object, properties: { url: { type: string }, alt: { type: string } } } } } }
        '401': { description: Unauthorized }
        '500': { description: Storage not configured }
components:
  securitySchemes:
    firebase:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Article:
      type: object
      properties:
        slug: { type: string }
        title: { type: string }
        subtitle: { type: string }
        content: { type: string }
        is_published: { type: boolean }
        created_at: { type: string }
        updated_at: { type: string }
        created_by: { type: string }
        created_by_name: { type: string }
        created_by_email: { type: string }
        created_by_photo: { type: string }
        likes: { type: integer }
        views: { type: integer }
        tags: { type: array, items: { type: string } }
        category: { type: string }
        reading_time_minutes: { type: integer }
        cover_url: { type: string }
        cover_alt: { type: string }
        cover_caption: { type: string }
    ArticleCreate:
      type: object
      properties:
        title: { type: string }
        subtitle: { type: string }
        content: { type: string }
        is_published: { type: boolean }
        tags: { type: array, items: { type: string } }
        category: { type: string }
        reading_time_minutes: { type: integer }
        cover_url: { type: string }
        cover_alt: { type: string }
        cover_caption: { type: string }
    ArticleUpdate:
      type: object
      properties:
        title: { type: string }
        subtitle: { type: string }
        content: { type: string }
        is_published: { type: boolean }
        tags: { type: array, items: { type: string } }
        category: { type: string }
        reading_time_minutes: { type: integer }
        cover_url: { type: string }
        cover_alt: { type: string }
        cover_caption: { type: string }
    Comment:
      type: object
      properties:
        id: { type: string }
        text: { type: string }
        author: { type: string }
        created_at: { type: string }
    CommentCreate:
      type: object
      required: [text]
      properties:
        text: { type: string }
        author: { type: string }
